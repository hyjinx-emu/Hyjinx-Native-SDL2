name: publish

on:
  push:
  release:
    types: [ published ]
    
permissions:
  contents: read
  pull-requests: write

env:
  SDL_VERSION: 2.30.0 # This needs to be updated to match the SDL version being compiled.
  
jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      version_number: ${{ steps.prepared.outputs.version_number }}
      version_suffix: ${{ steps.prepared.outputs.version_suffix }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Prepare version
        id: prepared
        uses: ./.github/actions/prepare-version
        with:
          target_file: "Directory.Build.props"
          explicit_version: ${{ github.event.release.tag_name }}

  build-native:
    name: build (${{ matrix.platform.name }})
    runs-on: ${{ matrix.platform.os }}
    needs: prepare

    strategy:
      matrix:
        platform:
          - { name: win-x64,     os: ubuntu-latest }
          - { name: linux-x64,   os: ubuntu-latest }
      fail-fast: false
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL
          ref: release-${{ env.SDL_VERSION }}
        
      - name: Install dependencies (Linux)
        if: matrix.platform.name == 'linux-x64'
        run: |
          sudo apt update
          sudo apt install -y cmake build-essential \
            libx11-dev libxext-dev libxrandr-dev libxcursor-dev \
            libxi-dev libgl1-mesa-dev libasound2-dev libpulse-dev \
            libudev-dev libdbus-1-dev libwayland-dev libxkbcommon-dev \
            wayland-protocols

      - name: Install dependencies (Windows)
        if: matrix.platform.name == 'win-x64'
        run: |
          sudo apt update
          sudo apt install -y cmake mingw-w64 make

      - name: Create build folder
        shell: bash
        run: mkdir build

      - name: Configure SDL2 (Windows)
        if: matrix.platform.name == 'win-x64'
        shell: bash
        working-directory: build
        run: |
          cmake .. \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_SYSTEM_PROCESSOR=x86_64 \
            -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
            -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
            -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/out

      - name: Configure SDL2 (Linux)
        if: matrix.platform.name == 'linux-x64'
        shell: bash
        working-directory: build
        run: |
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/out

      - name: Build SDL2
        shell: bash
        working-directory: build
        run: make -j$(nproc)

      - name: Install SDL2
        shell: bash
        working-directory: build
        run: make install

      - name: Prepare staging directory
        shell: bash
        run: mkdir -p dist/runtimes/${{ matrix.platform.name }}/native

      - name: Transfer SDL2 outputs (Windows)
        if: matrix.platform.name == 'win-x64'
        shell: bash
        run: cp out/bin/SDL2.dll dist/runtimes/${{ matrix.platform.name }}/native/

      - name: Transfer SDL2 outputs (Linux)
        if: matrix.platform.name == 'linux-x64'
        shell: bash
        run: cp out/lib/libSDL2.so dist/runtimes/${{ matrix.platform.name }}/native/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "native-${{ matrix.platform.name }}"
          path: "dist/"
      
  build-dotnet:
    runs-on: ubuntu-latest
    needs: prepare
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Update version
        uses: vers-one/dotnet-project-version-updater@v1.7
        with:
          file: "Directory.Build.props"
          version: ${{ needs.prepare.outputs.version_number }}

      - name: Build for Preview
        if: needs.prepare.output.version_suffix != ''
        run: dotnet build ./src/SDL2-CS/SDL2-CS.csproj -c Release -o "dist/lib/net9.0" --version-suffix "${{ needs.prepare.outputs.version_suffix }}"

      - name: Build for Release
        if: needs.prepare.output.version_suffix == ''
        run: dotnet build ./src/SDL2-CS/SDL2-CS.csproj -c Release -o "dist/lib/net9.0"

      - name: Cleanup outputs
        run: |
          rm dist/lib/net9.0/SDL2-CS.dll.config

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet
          path: "dist/"
  
  build-license:
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create dist folder
        shell: bash
        run: mkdir dist

      - name: Download SDL2 license
        shell: bash
        run: curl -o SDL2-LICENSE.txt "https://raw.githubusercontent.com/libsdl-org/SDL/release-${{ env.SDL_VERSION }}/LICENSE.txt"

      - name: Combine licenses
        shell: bash
        run: |
          (
            echo "=========================================="
            echo "SDL2 (Simple DirectMedia Layer)"
            echo "https://github.com/libsdl-org/SDL/blob/release-$SDL_VERSION/LICENSE.txt"
            echo
            cat SDL2-LICENSE.txt
            echo
            echo "=========================================="
            cat LICENSE.txt
          ) > dist/LICENSE.txt
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: license
          path: "dist/"

  package:
    runs-on: windows-latest
    needs: [ prepare, build-native, build-dotnet, build-license ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
          
      - name: Set up NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-api-key: ${{ secrets.NUGET_TOKEN }}
          nuget-version: latest

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Echo package structure
        shell: powershell
        run: Get-ChildItem -Path "dist/" -Recurse -File | Select-Object -ExpandProperty FullName

      - name: Package preview
        if: needs.prepare.outputs.version_suffix != ''
        shell: powershell
        run: nuget pack SDL2-CS.nuspec -OutputDirectory ./out -Suffix "${{ needs.prepare.outputs.version_suffix }}" -Version "${{ needs.prepare.outputs.version_number }}"

      - name: Package release
        if: github.event.action == 'published'
        shell: powershell
        run: nuget pack SDL2-CS.nuspec -OutputDirectory ./out -Version "${{ needs.prepare.outputs.version_number }}"
        
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./out/*.nupkg
    
  publish:
    runs-on: windows-latest
    needs: [ prepare, package ]

    steps:
      - name: Set up NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: latest

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: dist/

      - name: Push package(s)
        shell: powershell
        run: |
          Get-ChildItem -Path "dist" -Filter *.nupkg | ForEach-Object {
            Write-Host "Pushing $($_.FullName)"
            nuget push $_.FullName -Source https://api.nuget.org/v3/index.json -ApiKey "${{ secrets.NUGET_TOKEN }}"
          }
      
      - name: Bump version
        uses: ./.github/actions/bump-version
        if: github.event.action == 'published'
        with:
          target_file: "Directory.Build.props"
          new_version: ${{ needs.prepare.outputs.version_number }}
          token: ${{ github.token }}
