name: publish

on:
  push:
  release:
    types: [ published ]
    
permissions:
  contents: read
  pull-requests: write

env:
  SDL_VERSION: 2.30.0

jobs:
  build-native:
    name: build (${{ matrix.platform.name }})
    runs-on: ${{ matrix.platform.os }}
    
    strategy:
      matrix:
        platform:
          - { name: win-x64,     os: ubuntu-latest }
          - { name: linux-x64,   os: ubuntu-latest }
      fail-fast: false

    env:
      PLATFORM_NAME: ${{ matrix.platform.name }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: libsdl-org/SDL
          ref: release-${{ env.SDL_VERSION }}
        
      - name: Install dependencies (Linux)
        if: matrix.platform.name == 'linux-x64'
        run: |
          sudo apt update
          sudo apt install -y cmake build-essential \
            libx11-dev libxext-dev libxrandr-dev libxcursor-dev \
            libxi-dev libgl1-mesa-dev libasound2-dev libpulse-dev \
            libudev-dev libdbus-1-dev libwayland-dev libxkbcommon-dev \
            wayland-protocols

      - name: Install dependencies (Windows)
        if: matrix.platform.name == 'win-x64'
        run: |
          sudo apt update
          sudo apt install -y cmake mingw-w64 make

      - name: Create build folder
        shell: bash
        run: mkdir build

      - name: Configure SDL2 (Windows)
        if: matrix.platform.name == 'win-x64'
        shell: bash
        run: cmake .. \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_SYSTEM_PROCESSOR=x86_64 \
          -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
          -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
          -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres \
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/dist/runtimes/$PLATFORM_NAME/native

      - name: Configure SDL2 (Linux)
        if: matrix.platform.name == 'linux-x64'
        shell: bash
        run: cmake .. \
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/dist/runtimes/$PLATFORM_NAME/native

      - name: Build SDL2
        working-directory: build
        shell: bash
        run: make -j$(nproc)

      - name: Install SDL2
        working-directory: build
        shell: bash
        run: make install

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "native-${{ matrix.platform.name }}"
          path: "dist/"
      
  build-dotnet:
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Build
        run: dotnet build ./src/SDL2-CS/SDL2-CS.csproj -c Release -o "dist"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet
          path: "dist/"
          
  package:
    runs-on: windows-latest
    needs: [ build-native, build-dotnet ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
          
      - name: Set up NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-api-key: ${{ secrets.NUGET_TOKEN }}
          nuget-version: latest

      - name: Package preview
        if: github.event.action != 'published'
        shell: powershell
        run: nuget pack SDL2-CS.nuspec -OutputDirectory ./out -Suffix "preview.${{ github.run_number }}"

      - name: Package release
        if: github.event.action == 'published'
        shell: powershell
        run: nuget pack SDL2-CS.nuspec -OutputDirectory ./out
        
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./out/*.nupkg
    
  publish:
    runs-on: windows-latest
    needs: package

    steps:
      - name: Set up NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: latest

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: dist/

      - name: Push package(s)
        shell: powershell
        run: |
          Get-ChildItem -Path "dist" -Filter *.nupkg | ForEach-Object {
            Write-Host "Pushing $($_.FullName)"
            nuget push $_.FullName -Source https://api.nuget.org/v3/index.json -ApiKey "${{ secrets.NUGET_TOKEN }}"
          }
